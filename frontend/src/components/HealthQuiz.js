import React, { useState, useEffect } from 'react';
import { useAuth } from '../contexts/AuthContext';

const HealthQuiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [showResults, setShowResults] = useState(false);
  const { currentUser } = useAuth();

  const languages = {
    'en': 'English',
    'hi': 'Hindi (‡§π‡§ø‡§Ç‡§¶‡•Ä)'
  };

  const quizQuestions = {
    en: [
      {
        id: 1,
        question: "How would you rate your overall health?",
        options: ["Excellent", "Good", "Fair", "Poor"],
        type: "single",
        category: "general_health",
        points: [4, 3, 2, 1]
      },
      {
        id: 2,
        question: "Do you have any chronic conditions?",
        options: ["Diabetes", "Hypertension", "Heart Disease", "None"],
        type: "multiple",
        category: "chronic_conditions",
        points: [1, 1, 1, 4]
      },
      {
        id: 3,
        question: "How often do you exercise?",
        options: ["Daily", "3-4 times/week", "1-2 times/week", "Rarely/Never"],
        type: "single",
        category: "lifestyle",
        points: [4, 3, 2, 1]
      },
      {
        id: 4,
        question: "What is your age group?",
        options: ["18-30 years", "31-50 years", "51-70 years", "Above 70 years"],
        type: "single",
        category: "demographics",
        points: [4, 3, 2, 1]
      },
      {
        id: 5,
        question: "Do you smoke or use tobacco?",
        options: ["Yes, regularly", "Occasionally", "Used to, but quit", "Never"],
        type: "single",
        category: "lifestyle",
        points: [1, 2, 3, 4]
      },
      {
        id: 6,
        question: "How many hours do you sleep daily?",
        options: ["Less than 6 hours", "6-7 hours", "7-8 hours", "More than 8 hours"],
        type: "single",
        category: "lifestyle",
        points: [1, 2, 4, 3]
      },
      {
        id: 7,
        question: "Have you experienced any of these symptoms recently?",
        options: ["Fever/Headache", "Cough/Cold", "Stomach issues", "None"],
        type: "multiple",
        category: "symptoms",
        points: [1, 1, 1, 4]
      },
      {
        id: 8,
        question: "How often do you visit a doctor?",
        options: ["Regular checkups", "Only when sick", "Rarely", "Never"],
        type: "single",
        category: "healthcare_access",
        points: [4, 3, 2, 1]
      },
      {
        id: 9,
        question: "What's your stress level?",
        options: ["Very High", "High", "Moderate", "Low"],
        type: "single",
        category: "mental_health",
        points: [1, 2, 3, 4]
      },
      {
        id: 10,
        question: "Do you follow a balanced diet?",
        options: ["Always", "Most of the time", "Sometimes", "Rarely"],
        type: "single",
        category: "nutrition",
        points: [4, 3, 2, 1]
      }
    ],
    hi: [
      {
        id: 1,
        question: "‡§Ü‡§™ ‡§Ö‡§™‡§®‡•á ‡§∏‡§Æ‡§ó‡•ç‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•ã ‡§ï‡•à‡§∏‡•á ‡§∞‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?",
        options: ["‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü", "‡§Ö‡§ö‡•ç‡§õ‡§æ", "‡§†‡•Ä‡§ï-‡§†‡§æ‡§ï", "‡§ñ‡§∞‡§æ‡§¨"],
        type: "single",
        category: "general_health",
        points: [4, 3, 2, 1]
      },
      {
        id: 2,
        question: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ã‡§à ‡§™‡•Å‡§∞‡§æ‡§®‡•Ä ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§π‡•à?",
        options: ["‡§Æ‡§ß‡•Å‡§Æ‡•á‡§π", "‡§â‡§ö‡•ç‡§ö ‡§∞‡§ï‡•ç‡§§‡§ö‡§æ‡§™", "‡§π‡•É‡§¶‡§Ø ‡§∞‡•ã‡§ó", "‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç"],
        type: "multiple",
        category: "chronic_conditions",
        points: [1, 1, 1, 4]
      },
      {
        id: 3,
        question: "‡§Ü‡§™ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        options: ["‡§∞‡•ã‡§ú", "‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç 3-4 ‡§¨‡§æ‡§∞", "‡§∏‡§™‡•ç‡§§‡§æ‡§π ‡§Æ‡•á‡§Ç 1-2 ‡§¨‡§æ‡§∞", "‡§ï‡§≠‡•Ä-‡§ï‡§≠‡§æ‡§∞/‡§ï‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç"],
        type: "single",
        category: "lifestyle",
        points: [4, 3, 2, 1]
      },
      {
        id: 4,
        question: "‡§Ü‡§™‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§∞ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§π‡•à?",
        options: ["18-30 ‡§∏‡§æ‡§≤", "31-50 ‡§∏‡§æ‡§≤", "51-70 ‡§∏‡§æ‡§≤", "70 ‡§∏‡§æ‡§≤ ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ"],
        type: "single",
        category: "demographics",
        points: [4, 3, 2, 1]
      },
      {
        id: 5,
        question: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§Ø‡§æ ‡§§‡§Ç‡§¨‡§æ‡§ï‡•Ç ‡§ï‡§æ ‡§∏‡•á‡§µ‡§® ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?",
        options: ["‡§π‡§æ‡§Ç, ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á", "‡§ï‡§≠‡•Ä-‡§ï‡§≠‡§æ‡§∞", "‡§™‡§π‡§≤‡•á ‡§ï‡§∞‡§§‡§æ ‡§•‡§æ, ‡§Ö‡§¨ ‡§õ‡•ã‡§°‡§º ‡§¶‡§ø‡§Ø‡§æ", "‡§ï‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç"],
        type: "single",
        category: "lifestyle",
        points: [1, 2, 3, 4]
      },
      {
        id: 6,
        question: "‡§Ü‡§™ ‡§∞‡•ã‡§ú ‡§ï‡§ø‡§§‡§®‡•á ‡§ò‡§Ç‡§ü‡•á ‡§∏‡•ã‡§§‡•á ‡§π‡•à‡§Ç?",
        options: ["6 ‡§ò‡§Ç‡§ü‡•á ‡§∏‡•á ‡§ï‡§Æ", "6-7 ‡§ò‡§Ç‡§ü‡•á", "7-8 ‡§ò‡§Ç‡§ü‡•á", "8 ‡§ò‡§Ç‡§ü‡•á ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ"],
        type: "single",
        category: "lifestyle",
        points: [1, 2, 4, 3]
      },
      {
        id: 7,
        question: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™‡§ï‡•ã ‡§π‡§æ‡§≤ ‡§π‡•Ä ‡§Æ‡•á‡§Ç ‡§Ø‡•á ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§π‡•Å‡§è ‡§π‡•à‡§Ç?",
        options: ["‡§¨‡•Å‡§ñ‡§æ‡§∞/‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶", "‡§ñ‡§æ‡§Ç‡§∏‡•Ä/‡§ú‡•Å‡§ï‡§æ‡§Æ", "‡§™‡•á‡§ü ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ", "‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç"],
        type: "multiple",
        category: "symptoms",
        points: [1, 1, 1, 4]
      },
      {
        id: 8,
        question: "‡§Ü‡§™ ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç?",
        options: ["‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö", "‡§ï‡•á‡§µ‡§≤ ‡§¨‡•Ä‡§Æ‡§æ‡§∞ ‡§π‡•ã‡§®‡•á ‡§™‡§∞", "‡§ï‡§≠‡•Ä-‡§ï‡§≠‡§æ‡§∞", "‡§ï‡§≠‡•Ä ‡§®‡§π‡•Ä‡§Ç"],
        type: "single",
        category: "healthcare_access",
        points: [4, 3, 2, 1]
      },
      {
        id: 9,
        question: "‡§Ü‡§™‡§ï‡§æ ‡§§‡§®‡§æ‡§µ ‡§ï‡§æ ‡§∏‡•ç‡§§‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        options: ["‡§¨‡§π‡•Å‡§§ ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ", "‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ", "‡§Æ‡§ß‡•ç‡§Ø‡§Æ", "‡§ï‡§Æ"],
        type: "single",
        category: "mental_health",
        points: [1, 2, 3, 4]
      },
      {
        id: 10,
        question: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§≤‡•á‡§§‡•á ‡§π‡•à‡§Ç?",
        options: ["‡§π‡§Æ‡•á‡§∂‡§æ", "‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ‡§§‡§∞ ‡§∏‡§Æ‡§Ø", "‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä", "‡§ï‡§≠‡•Ä-‡§ï‡§≠‡§æ‡§∞"],
        type: "single",
        category: "nutrition",
        points: [4, 3, 2, 1]
      }
    ]
  };

  const questions = quizQuestions[selectedLanguage] || quizQuestions.en;

  const handleAnswerSelect = (questionId, optionIndex, isMultiple = false) => {
    if (isMultiple) {
      const currentAnswers = answers[questionId] || [];
      const newAnswers = currentAnswers.includes(optionIndex)
        ? currentAnswers.filter(idx => idx !== optionIndex)
        : [...currentAnswers, optionIndex];
      
      setAnswers({
        ...answers,
        [questionId]: newAnswers
      });
    } else {
      setAnswers({
        ...answers,
        [questionId]: [optionIndex]
      });
    }
  };

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      completeQuiz();
    }
  };

  const prevQuestion = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const completeQuiz = () => {
    let totalScore = 0;
    let maxScore = 0;

    questions.forEach(question => {
      const userAnswers = answers[question.id] || [];
      const questionScore = userAnswers.reduce((sum, answerIndex) => {
        return sum + (question.points[answerIndex] || 0);
      }, 0);
      
      totalScore += questionScore;
      maxScore += Math.max(...question.points);
    });

    setScore(Math.round((totalScore / maxScore) * 100));
    setQuizCompleted(true);
    setShowResults(true);
  };

  const getHealthRecommendations = () => {
    const recommendations = {
      en: {
        excellent: {
          title: "üåü Excellent Health!",
          message: "You're doing great! Keep maintaining your healthy lifestyle.",
          tips: [
            "Continue regular exercise routine",
            "Maintain balanced diet",
            "Keep up with regular health checkups",
            "Stay hydrated and get adequate sleep"
          ]
        },
        good: {
          title: "üëç Good Health",
          message: "You're on the right track! A few improvements can make you even healthier.",
          tips: [
            "Increase physical activity if possible",
            "Focus on stress management",
            "Ensure 7-8 hours of sleep daily",
            "Consider regular health screenings"
          ]
        },
        fair: {
          title: "‚ö†Ô∏è Fair Health",
          message: "There's room for improvement. Consider making some lifestyle changes.",
          tips: [
            "Start with 30 minutes of daily exercise",
            "Improve your diet with more fruits and vegetables",
            "Quit smoking/tobacco if applicable",
            "Schedule a health checkup soon"
          ]
        },
        poor: {
          title: "üö® Health Needs Attention",
          message: "Your health needs immediate attention. Please consult a healthcare provider.",
          tips: [
            "Schedule an immediate doctor consultation",
            "Start with basic lifestyle changes",
            "Consider professional health guidance",
            "Monitor symptoms closely"
          ]
        }
      },
      hi: {
        excellent: {
          title: "üåü ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø!",
          message: "‡§Ü‡§™ ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç! ‡§Ö‡§™‡§®‡•Ä ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç‡•§",
          tips: [
            "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç",
            "‡§∏‡§Ç‡§§‡•Å‡§≤‡§ø‡§§ ‡§Ü‡§π‡§æ‡§∞ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á‡§Ç",
            "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§§‡•á ‡§∞‡§π‡•á‡§Ç",
            "‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç ‡§î‡§∞ ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§®‡•Ä‡§Ç‡§¶ ‡§≤‡•á‡§Ç"
          ]
        },
        good: {
          title: "üëç ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
          message: "‡§Ü‡§™ ‡§∏‡§π‡•Ä ‡§∞‡§æ‡§∏‡•ç‡§§‡•á ‡§™‡§∞ ‡§π‡•à‡§Ç! ‡§ï‡•Å‡§õ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§Ü‡§™‡§ï‡•ã ‡§î‡§∞ ‡§≠‡•Ä ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§",
          tips: [
            "‡§Ø‡§¶‡§ø ‡§∏‡§Ç‡§≠‡§µ ‡§π‡•ã ‡§§‡•ã ‡§∂‡§æ‡§∞‡•Ä‡§∞‡§ø‡§ï ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø ‡§¨‡§¢‡§º‡§æ‡§è‡§Ç",
            "‡§§‡§®‡§æ‡§µ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç",
            "‡§∞‡•ã‡§ú 7-8 ‡§ò‡§Ç‡§ü‡•á ‡§ï‡•Ä ‡§®‡•Ä‡§Ç‡§¶ ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç",
            "‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç"
          ]
        },
        fair: {
          title: "‚ö†Ô∏è ‡§†‡•Ä‡§ï-‡§†‡§æ‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø",
          message: "‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§ó‡•Å‡§Ç‡§ú‡§æ‡§á‡§∂ ‡§π‡•à‡•§ ‡§ï‡•Å‡§õ ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ ‡§µ‡§ø‡§ö‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§",
          tips: [
            "‡§∞‡•ã‡§ú 30 ‡§Æ‡§ø‡§®‡§ü ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§∞‡•á‡§Ç",
            "‡§Ö‡§ß‡§ø‡§ï ‡§´‡§≤ ‡§î‡§∞ ‡§∏‡§¨‡•ç‡§ú‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§π‡§æ‡§∞ ‡§∏‡•Å‡§ß‡§æ‡§∞‡•á‡§Ç",
            "‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§®/‡§§‡§Ç‡§¨‡§æ‡§ï‡•Ç ‡§õ‡•ã‡§°‡§º‡•á‡§Ç ‡§Ø‡§¶‡§ø ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã",
            "‡§ú‡§≤‡•ç‡§¶ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç"
          ]
        },
        poor: {
          title: "üö® ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§∞ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§Ç",
          message: "‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§",
          tips: [
            "‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç",
            "‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
            "‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§≤‡•á‡§Ç",
            "‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§¨‡§æ‡§∞‡•Ä‡§ï‡•Ä ‡§∏‡•á ‡§®‡§ú‡§∞ ‡§∞‡§ñ‡•á‡§Ç"
          ]
        }
      }
    };

    const lang = recommendations[selectedLanguage] || recommendations.en;
    
    if (score >= 80) return lang.excellent;
    if (score >= 60) return lang.good;
    if (score >= 40) return lang.fair;
    return lang.poor;
  };

  const restartQuiz = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setQuizCompleted(false);
    setScore(0);
    setShowResults(false);
  };

  if (showResults) {
    const recommendation = getHealthRecommendations();
    
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4">
        <div className="max-w-4xl mx-auto">
          <div className="bg-white rounded-2xl shadow-xl p-8">
            <div className="text-center mb-8">
              <div className="text-6xl mb-4">üéâ</div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {selectedLanguage === 'hi' ? '‡§ï‡•ç‡§µ‡§ø‡§ú ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•Å‡§à!' : 'Quiz Completed!'}
              </h1>
              <p className="text-gray-600">
                {selectedLanguage === 'hi' ? '‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•ç‡§ï‡•ã‡§∞:' : 'Your Health Score:'}
              </p>
              <div className="text-5xl font-bold text-blue-600 mt-4">{score}%</div>
            </div>

            <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-6 mb-8">
              <h2 className="text-2xl font-bold mb-4">{recommendation.title}</h2>
              <p className="text-gray-700 mb-4">{recommendation.message}</p>
              
              <h3 className="font-semibold mb-3">
                {selectedLanguage === 'hi' ? 'üìã ‡§∏‡•Å‡§ù‡§æ‡§µ:' : 'üìã Recommendations:'}
              </h3>
              <ul className="space-y-2">
                {recommendation.tips.map((tip, index) => (
                  <li key={index} className="flex items-start">
                    <span className="text-green-500 mr-2 mt-1">‚úì</span>
                    <span>{tip}</span>
                  </li>
                ))}
              </ul>
            </div>

            <div className="grid md:grid-cols-2 gap-6 mb-8">
              <div className="bg-blue-50 rounded-xl p-6">
                <h3 className="font-semibold mb-3 text-blue-800">
                  {selectedLanguage === 'hi' ? 'üè• ‡§Ö‡§ó‡§≤‡•á ‡§ï‡§¶‡§Æ' : 'üè• Next Steps'}
                </h3>
                <ul className="text-sm space-y-2 text-blue-700">
                  <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç' : 'Consult with a doctor'}</li>
                  <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç' : 'Schedule regular checkups'}</li>
                  <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§ú‡•Ä‡§µ‡§®‡§∂‡•à‡§≤‡•Ä ‡§Ö‡§™‡§®‡§æ‡§è‡§Ç' : 'Adopt healthy lifestyle'}</li>
                </ul>
              </div>
              
              <div className="bg-green-50 rounded-xl p-6">
                <h3 className="font-semibold mb-3 text-green-800">
                  {selectedLanguage === 'hi' ? 'üìû ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§®‡§Ç‡§¨‡§∞' : 'üìû Emergency Numbers'}
                </h3>
                <ul className="text-sm space-y-2 text-green-700">
                  <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: 108' : 'National Emergency: 108'}</li>
                  <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§ï‡•ã‡§µ‡§ø‡§° ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®: 1075' : 'COVID Helpline: 1075'}</li>
                  <li>‚Ä¢ {selectedLanguage === 'hi' ? '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§π‡•á‡§≤‡•ç‡§™‡§≤‡§æ‡§á‡§®: 1091' : 'Women Helpline: 1091'}</li>
                </ul>
              </div>
            </div>

            <div className="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4">
              <button
                onClick={restartQuiz}
                className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all"
              >
                {selectedLanguage === 'hi' ? 'üîÑ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç' : 'üîÑ Retake Quiz'}
              </button>
              <button
                onClick={() => window.location.href = '/chat'}
                className="px-6 py-3 border-2 border-blue-600 text-blue-600 rounded-xl font-semibold hover:bg-blue-50 transition-all"
              >
                {selectedLanguage === 'hi' ? 'üí¨ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç' : 'üí¨ Chat with Dr. AI'}
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const currentQ = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center mb-4">
            <div className="w-12 h-12 bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl flex items-center justify-center">
              <span className="text-white font-bold text-xl">üéØ</span>
            </div>
            <h1 className="ml-3 text-3xl font-bold text-gray-900">
              {selectedLanguage === 'hi' ? '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•ç‡§µ‡§ø‡§ú' : 'Health Assessment Quiz'}
            </h1>
          </div>
          
          <div className="flex justify-center mb-6">
            <select
              value={selectedLanguage}
              onChange={(e) => setSelectedLanguage(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500"
            >
              {Object.entries(languages).map(([code, name]) => (
                <option key={code} value={code}>{name}</option>
              ))}
            </select>
          </div>

          {/* Progress Bar */}
          <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
            <div 
              className="bg-gradient-to-r from-blue-600 to-purple-600 h-3 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
          <p className="text-gray-600">
            {selectedLanguage === 'hi' ? '‡§™‡•ç‡§∞‡§∂‡•ç‡§®' : 'Question'} {currentQuestion + 1} {selectedLanguage === 'hi' ? '‡§ï‡§æ' : 'of'} {questions.length}
          </p>
        </div>

        {/* Question Card */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">
            {currentQ.question}
          </h2>

          <div className="space-y-4">
            {currentQ.options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleAnswerSelect(currentQ.id, index, currentQ.type === 'multiple')}
                className={`w-full p-4 text-left rounded-xl border-2 transition-all ${
                  answers[currentQ.id]?.includes(index)
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-blue-300 hover:bg-blue-50'
                }`}
              >
                <div className="flex items-center">
                  <div className={`w-6 h-6 rounded-full border-2 mr-4 flex items-center justify-center ${
                    answers[currentQ.id]?.includes(index)
                      ? 'border-blue-500 bg-blue-500'
                      : 'border-gray-300'
                  }`}>
                    {answers[currentQ.id]?.includes(index) && (
                      <span className="text-white text-sm">‚úì</span>
                    )}
                  </div>
                  <span className="text-lg">{option}</span>
                </div>
              </button>
            ))}
          </div>

          {currentQ.type === 'multiple' && (
            <p className="mt-4 text-sm text-gray-500">
              {selectedLanguage === 'hi' ? '‡§è‡§ï ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§ö‡•Å‡§® ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç' : 'You can select multiple options'}
            </p>
          )}
        </div>

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={prevQuestion}
            disabled={currentQuestion === 0}
            className="px-6 py-3 border-2 border-gray-300 text-gray-600 rounded-xl font-semibold hover:bg-gray-50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            ‚Üê {selectedLanguage === 'hi' ? '‡§™‡§ø‡§õ‡§≤‡§æ' : 'Previous'}
          </button>

          <button
            onClick={nextQuestion}
            disabled={!answers[currentQ.id] || answers[currentQ.id].length === 0}
            className="px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {currentQuestion === questions.length - 1 
              ? (selectedLanguage === 'hi' ? '‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§¶‡•á‡§ñ‡•á‡§Ç' : 'See Results')
              : (selectedLanguage === 'hi' ? '‡§Ö‡§ó‡§≤‡§æ' : 'Next')
            } ‚Üí
          </button>
        </div>

        {/* Info Panel */}
        <div className="mt-8 bg-white rounded-xl p-6 shadow-lg">
          <h3 className="font-semibold mb-3">
            {selectedLanguage === 'hi' ? 'üí° ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Ø‡§π ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à?' : 'üí° Why This Matters?'}
          </h3>
          <p className="text-gray-600 text-sm">
            {selectedLanguage === 'hi' 
              ? '‡§Ø‡§π ‡§ï‡•ç‡§µ‡§ø‡§ú ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§®‡•á ‡§î‡§∞ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£‡§§‡§É ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø ‡§π‡•à‡•§'
              : 'This quiz helps understand your health status and provides personalized recommendations. Your information is completely secure and confidential.'
            }
          </p>
        </div>
      </div>
    </div>
  );
};

export default HealthQuiz;